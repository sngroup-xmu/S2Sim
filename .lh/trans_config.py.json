{
    "sourceFile": "trans_config.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745460724529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745460724529,
            "name": "Commit-0",
            "content": "import re\nimport os\n\ndef extract_interface_blocks(config_text):\n    pattern = r'(interface \\S+)(.*?)(?=^interface|\\Z)'  # 匹配每个接口配置块\n    return re.findall(pattern, config_text, flags=re.S | re.M)\n\ndef get_ospf_interfaces(config_text):\n    interface_blocks = extract_interface_blocks(config_text)\n    ospf_interfaces = []\n\n    for header, body in interface_blocks:\n        if \"ip ospf\" in body:\n            ip_match = re.search(r'ip address (\\d+\\.\\d+\\.\\d+\\.\\d+) (\\d+\\.\\d+\\.\\d+\\.\\d+)', body)\n            if ip_match:\n                ip, mask = ip_match.groups()\n                ospf_interfaces.append((ip, mask))\n    return ospf_interfaces\n\ndef mask_to_wildcard(mask):\n    return '.'.join(str(255 - int(octet)) for octet in mask.split('.'))\n\ndef generate_network_commands(ospf_ifaces, area=\"0\"):\n    commands = []\n    for ip, mask in ospf_ifaces:\n        wildcard = mask_to_wildcard(mask)\n        commands.append(f\" network {ip} {wildcard} area {area}\")\n    return commands\n\ndef remove_ip_ospf_from_interfaces(config_text):\n    # 删除每个接口下的 \"ip ospf ...\" 行\n    return re.sub(r'^\\s*ip ospf .*\\n', '', config_text, flags=re.M)\n\ndef patch_config(original_config):\n    ospf_ifaces = get_ospf_interfaces(original_config)\n    ospf_networks = generate_network_commands(ospf_ifaces)\n\n    # 删除接口下 ospf 命令\n    updated_config = remove_ip_ospf_from_interfaces(original_config)\n\n    # 插入 network 命令到 router ospf 区块\n    updated_config = re.sub(\n        r'(router ospf \\d+\\n)',\n        lambda m: m.group(1) + ''.join(f\"{cmd}\\n\" for cmd in ospf_networks),\n        updated_config\n    )\n\n    return updated_config\n\ndef convert_to_cisco(config_text):\n    result = []\n    lines = config_text.strip().splitlines()\n    current_iface = \"\"\n\n    for line in lines:\n        line = line.rstrip()\n        if line.startswith(\"interface\"):\n            current_iface = line\n            result.append(line)  # 保持原接口名\n        elif \"encapsulation dot1q\" in line.lower():\n            # 思科区分大小写，习惯写成 dot1Q\n            vlan_id = re.search(r'dot1q\\s+(\\d+)', line, re.IGNORECASE)\n            if vlan_id:\n                result.append(f\" encapsulation dot1Q {vlan_id.group(1)}\")\n        else:\n            result.append(line)\n\n    return \"\\n\".join(result)\n\ndef replace_config(config_text):\n    # 替换 LoopBack 为 Loopback\n    config_text = re.sub(r'\\binterface LoopBack0\\b', 'interface Loopback0', config_text)\n\n    # 替换 BGP router-id 写法\n    config_text = re.sub(r'bgp router-id (\\d+\\.\\d+\\.\\d+\\.\\d+)', r'router bgp 65270\\n router-id \\1', config_text)\n\n    return config_text\n\ndef remove_lines_starting_with(folder, target_str):\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            file_path = os.path.join(root, file)\n            with open(file_path, \"r\") as f:\n                config_data = f.read()\n            converted = convert_to_cisco(config_data)\n            patched_config = patch_config(converted)\n            final_config = replace_config(patched_config)\n            with open(file_path, \"w\") as f:\n                f.write(final_config)\n\n\nif __name__ == \"__main__\":\n    folder = \"/home/rulan_yang/Scalpel-batfish/dataset/stress-test/Ipmetro-1006/configs\"\n    # target_str = [\"route-map\", \"ip community-list\", \"as-path\", \"set\",\"match\"]\n    target_str = [\"redistribute\"]\n    remove_lines_starting_with(folder, target_str)"
        }
    ]
}